From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Todd Rinaldo <toddr@cpan.org>
Date: Fri, 6 Nov 2015 16:23:14 -0600
Subject: [PATCH] Avoid importing symbols unless requested

Perl should avoid importing symbols unless requested

Bug-cPanel: https://jira.cpanel.net/browse/CPANEL-4359
---
 SOURCES/perl/dist/IO/lib/IO/Handle.pm      | 35 ++++++++++++++++++-----------------
 SOURCES/perl/dist/IO/lib/IO/Socket.pm      | 24 ++++++++++++++----------
 SOURCES/perl/dist/IO/lib/IO/Socket/INET.pm | 70 ++++++++++++++++++++++++++++++++++++++++++----------------------------
 SOURCES/perl/dist/IO/lib/IO/Socket/UNIX.pm | 31 ++++++++++++++++++++++---------
 4 files changed, 96 insertions(+), 64 deletions(-)

diff --git a/SOURCES/perl/dist/IO/lib/IO/Handle.pm b/SOURCES/perl/dist/IO/lib/IO/Handle.pm
index edaacffe..290f9a72 100644
--- a/SOURCES/perl/dist/IO/lib/IO/Handle.pm
+++ b/SOURCES/perl/dist/IO/lib/IO/Handle.pm
@@ -263,9 +263,10 @@ Derived from FileHandle.pm by Graham Barr E<lt>F<gbarr@pobox.com>E<gt>
 use 5.008_001;
 use strict;
 use Carp;
-use Symbol;
-use SelectSaver;
-use IO ();	# Load the XS module
+use Symbol      ();
+use SelectSaver ();
+use IO          (); # Load the XS module
+use Exporter    ();  # not a require because we want it to happen before INIT
 
 require Exporter;
 our @ISA = qw(Exporter);
@@ -322,14 +323,14 @@ sub new {
 	}
 	croak "usage: $class->new()";
     }
-    my $io = gensym;
+    my $io = Symbol::gensym;
     bless $io, $class;
 }
 
 sub new_from_fd {
     my $class = ref($_[0]) || $_[0] || "IO::Handle";
     @_ == 3 or croak "usage: $class->new_from_fd(FD, MODE)";
-    my $io = gensym;
+    my $io = Symbol::gensym;
     shift;
     IO::Handle::fdopen($io, @_)
 	or return undef;
@@ -366,7 +367,7 @@ sub fdopen {
 
     if (ref($fd) && "$fd" =~ /GLOB\(/o) {
 	# It's a glob reference; Alias it as we cannot get name of anon GLOBs
-	my $n = qualify(*GLOB);
+	my $n = Symbol::qualify(*GLOB);
 	*GLOB = *{*$fd};
 	$fd =  $n;
     } elsif ($fd =~ m#^\d+$#) {
@@ -472,7 +473,7 @@ sub stat {
 ##
 
 sub autoflush {
-    my $old = SelectSaver->new(qualify($_[0], caller));
+    my $old = SelectSaver->new(Symbol::qualify($_[0], caller));
     my $prev = $|;
     $| = @_ > 1 ? $_[1] : 1;
     $prev;
@@ -504,7 +505,7 @@ sub input_record_separator {
 
 sub input_line_number {
     local $.;
-    () = tell qualify($_[0], caller) if ref($_[0]);
+    () = tell Symbol::qualify($_[0], caller) if ref($_[0]);
     my $prev = $.;
     $. = $_[1] if @_ > 1;
     $prev;
@@ -512,7 +513,7 @@ sub input_line_number {
 
 sub format_page_number {
     my $old;
-    $old = SelectSaver->new(qualify($_[0], caller)) if ref($_[0]);
+    $old = SelectSaver->new(Symbol::qualify($_[0], caller)) if ref($_[0]);
     my $prev = $%;
     $% = $_[1] if @_ > 1;
     $prev;
@@ -520,7 +521,7 @@ sub format_page_number {
 
 sub format_lines_per_page {
     my $old;
-    $old = SelectSaver->new(qualify($_[0], caller)) if ref($_[0]);
+    $old = SelectSaver->new(Symbol::qualify($_[0], caller)) if ref($_[0]);
     my $prev = $=;
     $= = $_[1] if @_ > 1;
     $prev;
@@ -528,7 +529,7 @@ sub format_lines_per_page {
 
 sub format_lines_left {
     my $old;
-    $old = SelectSaver->new(qualify($_[0], caller)) if ref($_[0]);
+    $old = SelectSaver->new(Symbol::qualify($_[0], caller)) if ref($_[0]);
     my $prev = $-;
     $- = $_[1] if @_ > 1;
     $prev;
@@ -536,17 +537,17 @@ sub format_lines_left {
 
 sub format_name {
     my $old;
-    $old = SelectSaver->new(qualify($_[0], caller)) if ref($_[0]);
+    $old = SelectSaver->new(Symbol::qualify($_[0], caller)) if ref($_[0]);
     my $prev = $~;
-    $~ = qualify($_[1], caller) if @_ > 1;
+    $~ = Symbol::qualify($_[1], caller) if @_ > 1;
     $prev;
 }
 
 sub format_top_name {
     my $old;
-    $old = SelectSaver->new(qualify($_[0], caller)) if ref($_[0]);
+    $old = SelectSaver->new(Symbol::qualify($_[0], caller)) if ref($_[0]);
     my $prev = $^;
-    $^ = qualify($_[1], caller) if @_ > 1;
+    $^ = Symbol::qualify($_[1], caller) if @_ > 1;
     $prev;
 }
 
@@ -579,7 +580,7 @@ sub format_write {
     @_ < 3 || croak 'usage: $io->write( [FORMAT_NAME] )';
     if (@_ == 2) {
 	my ($io, $fmt) = @_;
-	my $oldfmt = $io->format_name(qualify($fmt,caller));
+	my $oldfmt = $io->format_name(Symbol::qualify($fmt,caller));
 	CORE::write($io);
 	$io->format_name($oldfmt);
     } else {
@@ -618,7 +619,7 @@ sub constant {
 sub printflush {
     my $io = shift;
     my $old;
-    $old = SelectSaver->new(qualify($io, caller)) if ref($io);
+    $old = SelectSaver->new(Symbol::qualify($io, caller)) if ref($io);
     local $| = 1;
     if(ref($io)) {
         print $io @_;
diff --git a/SOURCES/perl/dist/IO/lib/IO/Socket.pm b/SOURCES/perl/dist/IO/lib/IO/Socket.pm
index 5153920a..bd31c7b4 100644
--- a/SOURCES/perl/dist/IO/lib/IO/Socket.pm
+++ b/SOURCES/perl/dist/IO/lib/IO/Socket.pm
@@ -9,12 +9,12 @@ package IO::Socket;
 
 use 5.008_001;
 
-use IO::Handle;
-use Socket 1.3;
+use IO::Handle ();
+use Socket 1.3 ();
 use Carp;
 use strict;
-use Exporter;
-use Errno;
+use Exporter   ();  # not a require because we want it to happen before INIT
+use Errno      ();
 
 # legacy
 
@@ -34,7 +34,12 @@ sub import {
     if (@_ && $_[0] eq 'sockatmark') { # not very extensible but for now, fast
 	Exporter::export_to_level('IO::Socket', 1, $pkg, 'sockatmark');
     } else {
-	my $callpkg = caller;
+
+#
+# For compatibilty, if we ask to import this module we need to give them
+# all the IO::Handle and Socket symbols that are no longer imported in order to reduce memory usage
+#
+    my $callpkg = caller;
 	Exporter::export 'Socket', $callpkg, @_;
     }
 }
@@ -133,7 +138,7 @@ sub connect {
 		# Using the exception
 		# set we now emulate the behavior in Linux
 		#    - Karthik Rajagopalan
-		$err = $sock->getsockopt(SOL_SOCKET,SO_ERROR);
+		$err = $sock->getsockopt(&Socket::SOL_SOCKET, &Socket::SO_ERROR);
 		$errstr = $@ = "connect: $err";
 	    }
 	    elsif(!@$w[0]) {
@@ -164,7 +169,6 @@ sub connect {
 
     $err ? undef : $sock;
 }
-
 # Enable/disable blocking IO on sockets.
 # Without args return the current status of blocking,
 # with args change the mode as appropriate, returning the
@@ -345,8 +349,8 @@ sub getsockopt {
 
 sub sockopt {
     my $sock = shift;
-    @_ == 1 ? $sock->getsockopt(SOL_SOCKET,@_)
-	    : $sock->setsockopt(SOL_SOCKET,@_);
+    @_ == 1 ? $sock->getsockopt(&Socket::SOL_SOCKET,@_)
+	    : $sock->setsockopt(&Socket::SOL_SOCKET,@_);
 }
 
 sub atmark {
@@ -371,7 +375,7 @@ sub sockdomain {
     my $sock = shift;
     if (!defined(${*$sock}{'io_socket_domain'})) {
 	my $addr = $sock->sockname();
-	${*$sock}{'io_socket_domain'} = sockaddr_family($addr)
+	${*$sock}{'io_socket_domain'} = Socket::sockaddr_family($addr)
 	    if (defined($addr));
     }
     ${*$sock}{'io_socket_domain'};
diff --git a/SOURCES/perl/dist/IO/lib/IO/Socket/INET.pm b/SOURCES/perl/dist/IO/lib/IO/Socket/INET.pm
index a2de00e3..345407ca 100644
--- a/SOURCES/perl/dist/IO/lib/IO/Socket/INET.pm
+++ b/SOURCES/perl/dist/IO/lib/IO/Socket/INET.pm
@@ -7,29 +7,43 @@
 package IO::Socket::INET;
 
 use strict;
-use IO::Socket;
-use Socket;
 use Carp;
-use Exporter;
-use Errno;
+use IO::Socket ();
+use Socket     ();
+use Exporter   ();
+use Errno      ();
 
 our @ISA = qw(IO::Socket);
 our $VERSION = "1.49";
 
 my $EINVAL = exists(&Errno::EINVAL) ? Errno::EINVAL() : 1;
 
-IO::Socket::INET->register_domain( AF_INET );
+IO::Socket::INET->register_domain( &Socket::AF_INET );
 
-my %socket_type = ( tcp  => SOCK_STREAM,
-		    udp  => SOCK_DGRAM,
-		    icmp => SOCK_RAW
-		  );
+my %socket_type = ( tcp  => Socket::SOCK_STREAM(),
+                    udp  => Socket::SOCK_DGRAM(),
+                    icmp => Socket::SOCK_RAW()
+                  );
 my %proto_number;
 $proto_number{tcp}  = Socket::IPPROTO_TCP()  if defined &Socket::IPPROTO_TCP;
 $proto_number{udp}  = Socket::IPPROTO_UDP()  if defined &Socket::IPPROTO_UDP;
 $proto_number{icmp} = Socket::IPPROTO_ICMP() if defined &Socket::IPPROTO_ICMP;
 my %proto_name = reverse %proto_number;
 
+#
+# For compatibilty, if we ask to import this module we need to give them
+# all the Socket symbols that are no longer imported in order to reduce memory usage
+#
+sub import {
+    my $pkg = shift;
+    if (@_ && $_[0] eq 'sockatmark') { # not very extensible but for now, fast
+        Exporter::export_to_level('IO::Socket', 1, $pkg, 'sockatmark');
+    } else {
+        my $callpkg = caller;
+        Exporter::export 'Socket', $callpkg, @_;
+    }
+}
+
 sub new {
     my $class = shift;
     unshift(@_, "PeerAddr") if @_ == 1;
@@ -127,7 +141,7 @@ sub _get_addr {
     if ($multi && $addr_str !~ /^\d+(?:\.\d+){3}$/) {
 	(undef, undef, undef, undef, @addr) = gethostbyname($addr_str);
     } else {
-	my $h = inet_aton($addr_str);
+	my $h = Socket::inet_aton($addr_str);
 	push(@addr, $h) if defined $h;
     }
     @addr;
@@ -146,8 +160,8 @@ sub configure {
 					$arg->{Proto})
 			or return _error($sock, $!, $@);
 
-    $laddr = defined $laddr ? inet_aton($laddr)
-			    : INADDR_ANY;
+    $laddr = defined $laddr ? Socket::inet_aton($laddr)
+			    : Socket::INADDR_ANY();
 
     return _error($sock, $EINVAL, "Bad hostname '",$arg->{LocalAddr},"'")
 	unless(defined $laddr);
@@ -176,7 +190,7 @@ sub configure {
 
     while(1) {
 
-	$sock->socket(AF_INET, $type, $proto) or
+	$sock->socket(&Socket::AF_INET, $type, $proto) or
 	    return _error($sock, $!, "$!");
 
         if (defined $arg->{Blocking}) {
@@ -185,21 +199,21 @@ sub configure {
 	}
 
 	if ($arg->{Reuse} || $arg->{ReuseAddr}) {
-	    $sock->sockopt(SO_REUSEADDR,1) or
+	    $sock->sockopt(&Socket::SO_REUSEADDR,1) or
 		    return _error($sock, $!, "$!");
 	}
 
 	if ($arg->{ReusePort}) {
-	    $sock->sockopt(SO_REUSEPORT,1) or
+	    $sock->sockopt(&Socket::SO_REUSEPORT,1) or
 		    return _error($sock, $!, "$!");
 	}
 
 	if ($arg->{Broadcast}) {
-		$sock->sockopt(SO_BROADCAST,1) or
+		$sock->sockopt(&Socket::SO_BROADCAST,1) or
 		    return _error($sock, $!, "$!");
 	}
 
-	if($lport || ($laddr ne INADDR_ANY) || exists $arg->{Listen}) {
+	if($lport || ($laddr ne Socket::INADDR_ANY()) || exists $arg->{Listen}) {
 	    $sock->bind($lport || 0, $laddr) or
 		    return _error($sock, $!, "$!");
 	}
@@ -216,10 +230,10 @@ sub configure {
         $raddr = shift @raddr;
 
 	return _error($sock, $EINVAL, 'Cannot determine remote port')
-		unless($rport || $type == SOCK_DGRAM || $type == SOCK_RAW);
+		unless($rport || $type == &Socket::SOCK_DGRAM || $type == &Socket::SOCK_RAW);
 
 	last
-	    unless($type == SOCK_STREAM || defined $raddr);
+	    unless($type == &Socket::SOCK_STREAM || defined $raddr);
 
 	return _error($sock, $EINVAL, "Bad hostname '",$arg->{PeerAddr},"'")
 	    unless defined $raddr;
@@ -228,7 +242,7 @@ sub configure {
 #        my $before = time() if $timeout;
 
 	undef $@;
-        if ($sock->connect(pack_sockaddr_in($rport, $raddr))) {
+        if ($sock->connect(Socket::pack_sockaddr_in($rport, $raddr))) {
 #            ${*$sock}{'io_socket_timeout'} = $timeout;
             return $sock;
         }
@@ -253,56 +267,56 @@ sub connect {
     @_ == 2 || @_ == 3 or
        croak 'usage: $sock->connect(NAME) or $sock->connect(PORT, ADDR)';
     my $sock = shift;
-    return $sock->SUPER::connect(@_ == 1 ? shift : pack_sockaddr_in(@_));
+    return $sock->SUPER::connect(@_ == 1 ? shift : Socket::pack_sockaddr_in(@_));
 }
 
 sub bind {
     @_ == 2 || @_ == 3 or
        croak 'usage: $sock->bind(NAME) or $sock->bind(PORT, ADDR)';
     my $sock = shift;
-    return $sock->SUPER::bind(@_ == 1 ? shift : pack_sockaddr_in(@_))
+    return $sock->SUPER::bind(@_ == 1 ? shift : Socket::pack_sockaddr_in(@_))
 }
 
 sub sockaddr {
     @_ == 1 or croak 'usage: $sock->sockaddr()';
     my($sock) = @_;
     my $name = $sock->sockname;
-    $name ? (sockaddr_in($name))[1] : undef;
+    $name ? (Socket::sockaddr_in($name))[1] : undef;
 }
 
 sub sockport {
     @_ == 1 or croak 'usage: $sock->sockport()';
     my($sock) = @_;
     my $name = $sock->sockname;
-    $name ? (sockaddr_in($name))[0] : undef;
+    $name ? (Socket::sockaddr_in($name))[0] : undef;
 }
 
 sub sockhost {
     @_ == 1 or croak 'usage: $sock->sockhost()';
     my($sock) = @_;
     my $addr = $sock->sockaddr;
-    $addr ? inet_ntoa($addr) : undef;
+    $addr ? Socket::inet_ntoa($addr) : undef;
 }
 
 sub peeraddr {
     @_ == 1 or croak 'usage: $sock->peeraddr()';
     my($sock) = @_;
     my $name = $sock->peername;
-    $name ? (sockaddr_in($name))[1] : undef;
+    $name ? (Socket::sockaddr_in($name))[1] : undef;
 }
 
 sub peerport {
     @_ == 1 or croak 'usage: $sock->peerport()';
     my($sock) = @_;
     my $name = $sock->peername;
-    $name ? (sockaddr_in($name))[0] : undef;
+    $name ? (Socket::sockaddr_in($name))[0] : undef;
 }
 
 sub peerhost {
     @_ == 1 or croak 'usage: $sock->peerhost()';
     my($sock) = @_;
     my $addr = $sock->peeraddr;
-    $addr ? inet_ntoa($addr) : undef;
+    $addr ? Socket::inet_ntoa($addr) : undef;
 }
 
 1;
diff --git a/SOURCES/perl/dist/IO/lib/IO/Socket/UNIX.pm b/SOURCES/perl/dist/IO/lib/IO/Socket/UNIX.pm
index 60bdc047..b8d7469f 100644
--- a/SOURCES/perl/dist/IO/lib/IO/Socket/UNIX.pm
+++ b/SOURCES/perl/dist/IO/lib/IO/Socket/UNIX.pm
@@ -7,13 +7,26 @@
 package IO::Socket::UNIX;
 
 use strict;
-use IO::Socket;
 use Carp;
+use IO::Socket ();
+use Socket     ();
+use Exporter   ();
 
 our @ISA = qw(IO::Socket);
 our $VERSION = "1.49";
 
-IO::Socket::UNIX->register_domain( AF_UNIX );
+IO::Socket::UNIX->register_domain( &Socket::AF_UNIX );
+
+#
+# For compatibilty, if we ask to import this module we need to give them
+# all the Socket symbols that are no longer imported in order to reduce memory usage
+#
+
+sub import {
+    my $pkg = shift;
+    my $callpkg = caller;
+    Exporter::export 'Socket', $callpkg, @_;
+}
 
 sub new {
     my $class = shift;
@@ -25,9 +38,9 @@ sub configure {
     my($sock,$arg) = @_;
     my($bport,$cport);
 
-    my $type = $arg->{Type} || SOCK_STREAM;
+    my $type = $arg->{Type} || &Socket::SOCK_STREAM;
 
-    $sock->socket(AF_UNIX, $type, 0) or
+    $sock->socket(&Socket::AF_UNIX, $type, 0) or
 	return undef;
 
     if(exists $arg->{Blocking}) {
@@ -35,16 +48,16 @@ sub configure {
 	    return undef;
     }
     if(exists $arg->{Local}) {
-	my $addr = sockaddr_un($arg->{Local});
+	my $addr = Socket::sockaddr_un($arg->{Local});
 	$sock->bind($addr) or
 	    return undef;
     }
-    if(exists $arg->{Listen} && $type != SOCK_DGRAM) {
+    if(exists $arg->{Listen} && $type != &Socket::SOCK_DGRAM) {
 	$sock->listen($arg->{Listen} || 5) or
 	    return undef;
     }
     elsif(exists $arg->{Peer}) {
-	my $addr = sockaddr_un($arg->{Peer});
+	my $addr = Socket::sockaddr_un($arg->{Peer});
 	$sock->connect($addr) or
 	    return undef;
     }
@@ -55,13 +68,13 @@ sub configure {
 sub hostpath {
     @_ == 1 or croak 'usage: $sock->hostpath()';
     my $n = $_[0]->sockname || return undef;
-    (sockaddr_un($n))[0];
+    (Socket::sockaddr_un($n))[0];
 }
 
 sub peerpath {
     @_ == 1 or croak 'usage: $sock->peerpath()';
     my $n = $_[0]->peername || return undef;
-    (sockaddr_un($n))[0];
+    (Socket::sockaddr_un($n))[0];
 }
 
 1; # Keep require happy
