From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Todd Rinaldo <toddr@cpanel.net>
Date: Tue, 20 Sep 2016 15:43:41 -0500
Subject: [PATCH] COW Static support

Cow strings use a counter behind the final "\0",
we are going to use its maximum value of 255
as an immortal counter. (using the constant COW_STATIC)

In addition to use it for B::C in order to use static cowpvs
we will also make it available for any uncompiled programs,
when a COW strings reach the 255 it will never decrease / increase.
---
 SOURCES/perl/sv.c | 29 +++++++++++++++--------------
 SOURCES/perl/sv.h |  3 ++-
 2 files changed, 17 insertions(+), 15 deletions(-)

diff --git a/SOURCES/perl/sv.c b/SOURCES/perl/sv.c
index bcddac61..4c05ab0c 100644
--- a/SOURCES/perl/sv.c
+++ b/SOURCES/perl/sv.c
@@ -4482,10 +4482,8 @@ Perl_sv_setsv_flags(pTHX_ SV *dsv, SV* ssv, const I32 flags)
 #ifdef PERL_COPY_ON_WRITE
                  (sflags & SVf_IsCOW
                    ? (!len ||
-                       (  (CHECK_COWBUF_THRESHOLD(cur,len) || SvLEN(dsv) < cur+1)
-                          /* If this is a regular (non-hek) COW, only so
-                             many COW "copies" are possible. */
-                       && CowREFCNT(ssv) != SV_COW_REFCNT_MAX  ))
+                       (  (CHECK_COWBUF_THRESHOLD(cur,len) || SvLEN(dsv) < cur+1) )
+                     )
                    : (  (sflags & CAN_COW_MASK) == CAN_COW_FLAGS
                      && !(SvFLAGS(dsv) & SVf_BREAK)
                      && CHECK_COW_THRESHOLD(cur,len) && cur+1 < len
@@ -4520,7 +4518,7 @@ Perl_sv_setsv_flags(pTHX_ SV *dsv, SV* ssv, const I32 flags)
                     if (sflags & SVf_IsCOW) {
                         sv_buf_to_rw(ssv);
                     }
-                    CowREFCNT(ssv)++;
+                    if(CowREFCNT(ssv) != COW_STATIC ) CowREFCNT(ssv)++;
                     SvPV_set(dsv, SvPVX_mutable(ssv));
                     sv_buf_to_ro(ssv);
             } else
@@ -4712,7 +4710,6 @@ Perl_sv_setsv_cow(pTHX_ SV *dsv, SV *ssv)
             goto common_exit;
         }
         assert(SvCUR(ssv)+1 < SvLEN(ssv));
-        assert(CowREFCNT(ssv) < SV_COW_REFCNT_MAX);
     } else {
         assert ((SvFLAGS(ssv) & CAN_COW_MASK) == CAN_COW_FLAGS);
         SvUPGRADE(ssv, SVt_COW);
@@ -4724,7 +4721,7 @@ Perl_sv_setsv_cow(pTHX_ SV *dsv, SV *ssv)
 #  ifdef PERL_DEBUG_READONLY_COW
     if (already) sv_buf_to_rw(ssv);
 #  endif
-    CowREFCNT(ssv)++;
+    if(CowREFCNT(ssv) != COW_STATIC ) CowREFCNT(ssv)++;
     new_pv = SvPVX_mutable(ssv);
     sv_buf_to_ro(ssv);
 
@@ -5073,8 +5070,10 @@ S_sv_uncow(pTHX_ SV * const sv, const U32 flags)
             {
                 U8 cowrefcnt = CowREFCNT(sv);
                 if(cowrefcnt != 0) {
-                    cowrefcnt--;
-                    CowREFCNT(sv) = cowrefcnt;
+                    if(cowrefcnt != COW_STATIC ) {
+                        cowrefcnt--;
+                        CowREFCNT(sv) = cowrefcnt;
+                    }
                     sv_buf_to_ro(sv);
                     goto copy_over;
                 }
@@ -6699,8 +6698,8 @@ Perl_sv_clear(pTHX_ SV *const orig_sv)
                 }
             }
 #ifdef PERL_ANY_COW
-            else if (SvPVX_const(sv)
-                     && !(SvTYPE(sv) == SVt_PVIO
+            else if (SvPVX_const(sv) /* PV is valid */
+                    && !(SvTYPE(sv) == SVt_PVIO /* Not an IO pointer */
                      && !(IoFLAGS(sv) & IOf_FAKE_DIRP)))
             {
                 if (SvIsCOW(sv)) {
@@ -6718,9 +6717,11 @@ Perl_sv_clear(pTHX_ SV *const orig_sv)
                     }
                     else {
                         if (CowREFCNT(sv)) {
-                            sv_buf_to_rw(sv);
-                            CowREFCNT(sv)--;
-                            sv_buf_to_ro(sv);
+                            if(CowREFCNT(sv) != COW_STATIC ) {
+                                sv_buf_to_rw(sv);
+                                CowREFCNT(sv)--;
+                                sv_buf_to_ro(sv);
+                            }
                             SvLEN_set(sv, 0);
                         }
                     }
diff --git a/SOURCES/perl/sv.h b/SOURCES/perl/sv.h
index 362de6b3..340a94ee 100644
--- a/SOURCES/perl/sv.h
+++ b/SOURCES/perl/sv.h
@@ -2117,7 +2117,7 @@ Returns the hash for C<sv> created by C<L</newSVpvn_share>>.
 #ifdef PERL_COPY_ON_WRITE
 #   define SvCANCOW(sv)					    \
         (SvIsCOW(sv)					     \
-         ? SvLEN(sv) ? CowREFCNT(sv) != SV_COW_REFCNT_MAX : 1 \
+         ? 1 \
          : (SvFLAGS(sv) & CAN_COW_MASK) == CAN_COW_FLAGS       \
                             && SvCUR(sv)+1 < SvLEN(sv))
    /* Note: To allow 256 COW "copies", a refcnt of 0 means 1. */
@@ -2125,6 +2125,7 @@ Returns the hash for C<sv> created by C<L</newSVpvn_share>>.
 #   define SV_COW_REFCNT_MAX	nBIT_UMAX(sizeof(U8) * CHARBITS)
 #   define CAN_COW_MASK	(SVf_POK|SVf_ROK|SVp_POK|SVf_FAKE| \
                          SVf_OOK|SVf_BREAK|SVf_READONLY|SVf_PROTECT)
+#   define COW_STATIC SV_COW_REFCNT_MAX
 #endif
 
 #define CAN_COW_FLAGS	(SVp_POK|SVf_POK)
